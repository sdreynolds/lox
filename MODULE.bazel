bazel_dep(name = "apple_rules_lint", version = "0.4.0")
linter = use_extension("@apple_rules_lint//lint:extensions.bzl", "linter")
linter.configure(name = "java-checkstyle", config = "@contrib_rules_jvm//java:checkstyle-default-config")
linter.configure(name = "java-spotbugs", config = "@contrib_rules_jvm//java:spotbugs-default-config")
use_repo(linter, "apple_linters")

bazel_dep(name = "contrib_rules_jvm", version = "0.28.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "gazelle", version = "0.43.0")
bazel_dep(name = "rules_jvm_external", version = "6.7")
bazel_dep(name = "rules_java", version = "8.11.0")
bazel_dep(name = "gazelle_cc", version = "") # This extension, use the latest version
git_override(
    module_name = "gazelle_cc",
    commit = "00027463ef731bff2c651175ed5b897619d7d893",
    remote = "https://github.com/EngFlow/gazelle_cc/",
)
bazel_dep(name = "rules_cc", version = "0.1.1")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    name = "maven",
    boms = [
        "org.junit:junit-bom:5.12.2"
    ],
    artifacts = [
        "org.junit.jupiter:junit-jupiter-api",
        "org.junit.jupiter:junit-jupiter-engine",
        "org.junit.platform:junit-platform-launcher",
        "org.junit.platform:junit-platform-reporting",
        "org.junit.jupiter:junit-jupiter-params",

        # https://mvnrepository.com/artifact/com.github.stefanbirkner/system-lambda
        # Gives taps on system out and allows us to catch exit codes!
        "com.github.stefanbirkner:system-lambda:jar:1.2.1",
    ],
    fetch_sources = True,
    lock_file = "//:maven_install.json",
    # This fails on github actions runner

########################################################################################################################
# Error in fail: maven_install.json contains an invalid input signature and must be regenerated. This typically happens
# when the maven_install artifacts have been changed but not repinned. PLEASE DO NOT MODIFY THIS FILE DIRECTLY! To
# generate a new maven_install.json and re-pin the artifacts, please run: #
#     REPIN=1 bazel run @maven//:pin
########################################################################################################################

    # fail_if_repin_required = True,
)
use_repo(maven, "maven")

bazel_dep(name = "toolchains_llvm", version = "1.4.0")

# Configure and register the toolchain.
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    llvm_version = "16.0.0",
)

use_repo(llvm, "llvm_toolchain")
# use_repo(llvm, "llvm_toolchain_llvm") # if you depend on specific tools in scripts

register_toolchains("@llvm_toolchain//:all")
